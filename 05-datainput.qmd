---
output: html_document
---

# データ入力
```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, collapse=TRUE)
```

```{r}
#| message: false
#| warning: false
library(tidyverse)
```

## はじめに
R においてデータ分析を行うには、まずデータを R に取り込む必要がある。
R や一部のパッケージにはサンプルデータが同梱されているものの、実務では外部ファイルから読み込むケースが主流である。読み込まれたデータは、基本的にデータフレーム (data.frame) として扱われる。

データフレームは、同じ長さのベクトルを組み合わせたリストである。たとえば次のように作成できる。
```{r}
df <- data.frame(x = rnorm(10), y = letters[1:10])
str(df)
```

かつての `data.frame()` は文字列を自動的に因子に変換していた。これを避けるには `stringsAsFactors = FALSE` を明示する。
```{r}
df <- data.frame(x = rnorm(10), y = letters[1:10], stringsAsFactors= FALSE)
str(df)
```

あるいは `dplyr` パッケージの `data_frame()`（現行では `tibble()` が推奨）を使えば、オプションなしで文字列を文字列のまま保持できる。
```{r}
library(dplyr)
df <- data_frame(x = rnorm(10), y = letters[1:10])
str(df)
```
`tibble()` は列名にスペースが含まれていても自動補正せずに扱え、`print()` 時に一部だけ表示してくれるため大規模データの確認がしやすい。

以下ではファイル形式ごとに読み込み方法をまとめる。共通して重要なのは、現在のワーキングディレクトリとファイルの所在を正しく把握することだ。

現在のワーキングディレクトリは以下のコマンドで確認できる.
```{r}
#| eval: false
getwd()
```
ワーキングディレクトリを変更するには `setwd()` を使う。
プロジェクト内で常に同じ相対パスを使いたい場合は、`here` パッケージを使ってプロジェクトルートを基準に指定する方法も有効である。

例えば、現在のワーキングディレクトリが `C:/Users/kenji/work/project` で、データ `data.csv` が `C:/Users/kenji/work/project/data` にあるとする。
```{r}
#| eval: false
df <- read.table("work/data.csv", header=TRUE, sep = ",")
```
このまま読み込むか、先にワーキングディレクトリを目的のフォルダへ変更する必要がある。
```{r}
#| eval: false
setwd("C:/Users/kenji/work/project/data")
df <- read.table("data.csv", header=TRUE, sep = ",")
```

`RStudio` ではメニューバーの「File」>「Import Dataset」からウィザード形式でファイルを読み込める。
インポート時に生成されたコードは History ペインから確認できるため、再現性のためにも控えておくとよい。

```{r}
#| echo: false
knitr::include_graphics("figs/rstudio_input.gif")
```

## csv ファイル

`csv` は comma-separated values の略で、その名の通りカンマ区切りのテキストファイルである。
```
var1, var2, var3
3, 4,"text"
4, 4, "text"
...
```
先頭行に列名が含まれることが多いが、ないケースもあるので事前確認が必要だ。他ソフトで作成したデータを CSV で保存すれば、R から容易に読み込める。

CSV を読み込む基本的な手段は `read.table()` を使うこと（スペルに注意）。
```{r}
#| eval: false
df <- read.table("data.csv", header=TRUE, sep = ",")
```
このコードでオブジェクト `df` にデータフレームとして読み込まれる。

`read.csv()` を使えば、区切り文字やヘッダー有無の指定を省ける。
```{r}
#| eval: false
df <- read.csv("data.csv")
```
ただし `read.csv()` は列名に重複があると自動で `X` を付けて補正する。原データの列名をそのまま使いたい場合は `check.names = FALSE` を指定する。

外部ファイルを読み込むと文字列が因子に変換される場合があるので、不要なら `stringsAsFactors = FALSE` を指定する。
```{r}
#| eval: false
df <- read.csv("data.csv", stringsAsFactors= FALSE)
```

書き出すときは次のようにする。
```{r}
#| eval: false
write.csv(df,"data.csv", row.names = FALSE)
```
ここでは行名が 1 列目に書き込まれないよう、`row.names = FALSE` を指定している。

高速で柔軟な `readr` パッケージを使う方法もある。読み込みは次の通り。
```{r}
#| eval: false
library(readr)
df <- read_csv("data.csv")
```
こちらは既定で文字列を因子化しない。
また `read_csv()` は列型を自動推定するが、必要に応じて `col_types` で明示的に指定できる。

書き込みは次の通り。
```{r}
#| eval: false
write_csv(df,"data.csv")
```
特にオプションをつけなくても, `rownames` は書き込まない.

日本語が含まれる CSV ファイルは文字コードに注意が必要である。詳細は次節で述べる。

## EXCEL ファイル
Excel はビジネスで広く使われるスプレッドシートであり、R からもデータを扱える。

最近の Excel ファイルは拡張子が `xlsx` で、`readxl` パッケージを使えば簡単に読み込める。
```{r}
#| eval: false
library(readxl)
df <- read_excel("data.xlsx",1)
```
この例では `data.xlsx` の 1 枚目のシートを読み込んでいる。

直接シート名を指定することができる.
```{r}
#| eval: false
read_excel("data.xlsx","Revenues")
```
こちらは「Revenues」というシート名を指定している。

Excel から取り込む場合は、1 行目を列名にし、各列でデータ型を揃えておく。最終行に合計行などがあると数値として取り込まれてしまうので注意。


Excel ファイルを一度 CSV に変換してから読み込む方法もあるが、いくつか注意点がある。
主な注意点は 2 つある。
1 つ目は、桁区切りのカンマが入ったまま保存すると文字列として扱われること。`read.csv()` で数値として読み込みたい場合は、事前にカンマを削除して保存する（`read_csv()` なら自動で数値化されることが多い）。

2 つ目は、ファイルを CSV に変換すると Shift_JIS で保存される場合がある点である。Linux や macOS（あるいは UTF-8 を標準とする環境）では文字化けするため、`read.csv()` で読み込む際は
```{r}
#| eval: false
df <- read.csv("data.csv", stringAsFactors=FALSE, fileEncoding="SJIS")
```
とし、`read_csv()` を使う場合は
```{r}
#| eval: false
df <- read_csv("data.csv", locale=locale(encoding = "SJIS"))
```
と指定する。

経験上、`readxl` は日本語を適切に扱ってくれるため、日本語が含まれる場合は無理に CSV に変換せず、Excel ファイルのまま読み込む方が安全である。
複数シートをまとめて読み込みたい場合は `excel_sheets()` でシート一覧を取得し、`map()` と組み合わせてループすると効率的である。

## STATA
Stata は実証研究で広く使われる統計ソフトで、R でもデータを読み込める。

Stata のデータは拡張子 `.dta` で、`foreign` パッケージなどを用いて読み込む。
```{r}
#| eval: false
library(foreign)
df <- read.dta("data.dta")
```

ただ, 最新の Stata には対応していない.
最新の Stata に対応するにはライブラリ `haven` を導入する.
```{r}
#| eval: false
library(haven)
df <- read_dta("data.dta")
```
`haven` では `write_dta()` を使って R のデータを Stata 形式で書き出すこともできる。

他にも `SAS` や `SPSS` などの統計パッケージのデータも取り込むことができる.
`haven` には `read_sas()` や `read_sav()` など、各種形式に対応した関数が揃っている。

## R に入っているデータ
R およびパッケージにはいくつかのデータがはいっている.
どのようなデータが利用可能かは以下のコマンドで調べることができる.
```{r}
#| eval: false
data()
```

それがどのような変数が含まれているのかを調べるには, `help` を使えばよい.
```{r}
#| eval: false
help(cars)
```

```{r}
#| echo: false
knitr::include_graphics("figs/rstudio_data.gif")
```

パッケージに含まれるデータセットは `data()` を使ってロードする。
```{r}
library(AER)
data(CPS1985)
summary(CPS1985)
```


## インターネットからデータ入力
Web スクレイピングや公式 API を利用すれば、インターネット上のデータを直接取得できる。代表的なデータベースと対応パッケージをいくつか挙げておく。

+ [Yahoo! Finance](https://finance.yahoo.com/) (`quantmod`)
+ [Yahoo! Finance Japan](https://finance.yahoo.co.jp/) (`RFinanceYJ`)
+ [World Development Indicators](http://www.worldbank.org/) (`WDI`)
+ [Eurostat](http://ec.europa.eu/eurostat/data/database) (`eurostat`)
+ [e-stat](https://www.e-stat.go.jp/) (`estatap`)
金融データの取得には `tidyquant`、世界銀行の指標には `WDI`、地理統計には `sf` パッケージなど、用途に応じたラッパーが多数存在する。

URL を直接指定してファイルを読み込むことも可能である。
```{r}
#| eval: false
library(haven)
URL <- "http://fmwww.bc.edu/ec-p/data/wooldridge/attend.dta"
df <-read_dta(URL)
```

ローカルに保存しておきたい場合は `download.file()` を併用するとよい。
```{r}
#| eval: false
if(!file.exists("mroz.dta")) download.file(URL, "mroz.dta",method="curl")
library(haven)
df <- read_dta("mroz.dta")
```
ダウンロードに時間がかかる場合は、`destfile` を分かりやすいパスに設定し、`mode = "wb"`（バイナリモード）を指定するのが安全である。

## その他のデータ入力
R 専用のバイナリファイル（`.RData` や `.rds`）として保存していれば、`load()` や `readRDS()` で高速に読み込むことができる。

さらに、`DBI`・`RSQLite`・`odbc` などのパッケージを使えばリレーショナルデータベースに接続してデータを取得できる。環境やニーズに応じて適切なドライバーを選ぶとよい。



