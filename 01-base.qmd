---
output:
  html_document: default
  html_notebook: default
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, collapse=TRUE)
```

# 基本
R の基礎を学ぶには、次のオンライン教材が役立つ（2025 年時点）。

- Posit Cloud Primers（旧 RStudio Primers）  
  https://posit.cloud/learn/primers  
  インタラクティブな演習を通じて R の基礎から tidyverse まで幅広く学べる。英語のみの提供だが、無料アカウントで主要コンテンツを利用できる。
- Posit Academy  
  https://academy.posit.co/  
  Posit 社が提供する体系的な e ラーニングプログラム。動画とハンズオン課題で R とデータサイエンスを段階的に学べる（英語、要アカウント）。
- swirl（R コンソール内で動作する対話型チュートリアル）  
  https://swirlstats.com/  
  R のコンソールに組み込んで利用する教材で、コマンドを入力しながら学習できる。コミュニティ制作のレッスンには日本語訳もある。
- R for Data Science, 2nd Edition（オンライン書籍）  
  https://r4ds.hadley.nz/  
  R と tidyverse のモダンな実践書。ブラウザで無料公開され、Posit Cloud のサンプルプロジェクトからコードをすぐ試せる。

日本語で要点を確認したい場合は、以下のリソースが便利である。

- R for Data Science 日本語版（第 1 版）  
  https://r4ds-jp.netlify.app/  
  コミュニティによる翻訳。基礎からデータ可視化、tidyverse の使い方まで日本語で学べる。
- Posit のチートシート集  
  https://posit.co/resources/cheatsheets/  
  公式の英語版に加え、従来の日本語版 PDF（例: https://www.rstudio.com/wp-content/uploads/2016/10/r-cheat-sheet-ja.pdf）も引き続き利用できる。
- 統計 Web（統計数理研究所による解説サイト）  
  https://statistics.co.jp/learning/  
  R の導入から基本操作、グラフ作成までを日本語で丁寧に解説している。

動画教材としては、ドットインストールの「はじめての R プログラミング」講座（13 本、合計約 40 分）が 2024 年以降も公開されており、基本編は無料で視聴できる。　

http://dotinstall.com/lessons/basic_r


このほかにも、Posit 公式チャンネルや国内コミュニティが公開する YouTube 動画が随時更新されているため、興味のあるトピックで検索してみるとよい。


## 電卓としての R

R は電卓としても利用できる。
代表的な算術演算子を以下に示す。

演算子  | 説明          | 例
------- | ------------- | ----------
`+`     | 足し算        | `5 + 2 = 7`
`-`     | 引き算        | `5 - 2 = 3`
`*`     | 掛け算        | `5 * 2 = 10`
`/`     | 割り算        | `5 / 2 = 2.5`
`^`, `**`| べき算        | `5 ^ 2 = 25`, `5 ** 2 = 25`
`%%`     | 割り算の余り | `5 %% 2 = 1`
`%/%`     | 割り算の切り下げ  | `5 %/% 2 = 2`

演算は一般的な優先順位に従って処理されるが、`()` で囲めば計算の順序を明示的に指定できる。

```{r}
5 + 2
5 - 2
5 * 2
5 / 2
5 ^ 2
5 ** 2
5 %% 2
5 %/% 2
```

## 関数電卓としての R
R は関数電卓のようにさまざまな関数を呼び出して計算できる。たとえば以下の関数がある。

関数    | 説明          
------- | -------------
`sqrt()`    | 平方根 $\sqrt{\cdot}$    
`exp()`     | 指数    
`log()`     | 対数    
`factorial()`     | 階乗    
`choose()`     | 組み合わせ    
`abs()`     | 絶対値    
`round()`   | 四捨五入    
`floor()`   | 切り下げ    
`ceiling()` | 切り上げ    

```{r}
sqrt(10)
exp(10)
log(10)
factorial(4)
choose(4,2)
abs(-10)
round(3.5)
floor(3.5)
ceiling(3.5)
```

関数に渡す値は引数と呼ばれる。
組み合わせを計算する関数 `choose` の引数は 2 つあり、複数の引数は `,` で区切る。
引数の順序は、名前を明示すれば入れ替えられる。
```{r}
choose(4, 2)
choose(n=4, k=2)
choose(k=2, n=4)
```
引数によっては省略しても既定値が自動的に補われることがある。
詳細は関数ごとのヘルプを参照するとよい。

たとえば `choose` のヘルプは次のように参照できる。
```{r}
#| eval: false
help(choose)
?choose
```
で確認できる。

ヘルプには関数の説明、使用例、引数の既定値などがまとまっている。
RStudio を利用している場合は、ヘルプペインに整形されたドキュメントが表示される。


## R の型
R では値に型 (type) があり、数値 (numeric)、文字列 (character)、論理値 (logical) など^[他にも日付 (Date) やバイナリ (raw) がある。]が用意されている。
多くの言語と異なり、型をあらかじめ宣言しなくても自動的に決まる。

数値には整数 (integer) や、実数をコンピュータ上で扱う倍精度浮動小数点数 (double) など^[他にも複素数 (complex) がある。]が含まれる。
整数か倍精度浮動小数点数かは自動的に振り分けられるが、数字の後ろに `L` を付けて整数を明示することもできる。

文字列は `"` (ダブルクォーテーション) もしくは `'` (シングルクォーテーション) で囲む。
`TRUE` もしくは `FALSE` を取る値は論理値 (logical) と呼ばれる。省略して `T` や `F` と表せるが、混乱を招きやすいので推奨しない。

値の型は関数 `typeof()` で確認できる。
```{r}
typeof(3)
typeof(3L)
typeof("3")
typeof(TRUE)
typeof(FALSE)
typeof(T)
typeof(F)
```
オブジェクトのクラス（統計的な型付け）を確認するには `class()` を使う。
より複雑なオブジェクトでは `typeof()` と `class()` の結果が異なることもある点を覚えておきたい。

特殊な値として、無限大を表す `Inf`、非数を表す `NaN`、欠損値を表す `NA`、空を表す `NULL` がある。
`Inf` と `NaN` は数値として分類され、`NA` の型は論理値として扱われる。
また、`NULL` は独自の型として扱われる。
`NaN` は 0 を 0 で割ったときのように値が定まらない計算で現れる。
`NA` はデータが欠損している場合に使われ、数値・文字列など別の型の `NA` も存在する。
```{r}
1/0
typeof(1/0)
0/0
typeof(0/0)
typeof(NA)
typeof(NULL)
```


## 変数
値は変数 (variable) に代入すると再利用できる。
R では代入のことを付値 (assign) といい、次のように実行する。
```{r}
x <- 4 
4 -> x
x = 4
assign("x",4)
```
多くのプログラミング言語では 3 番目の方法のみが一般的だが、
R では最初の方法が推奨されている。^[
例えば以下を参照されたい: http://adv-r.had.co.nz/Style.html
]

代入した値は、その変数名を入力すれば確認できる。
代入と同時に確認したい場合は式全体を丸括弧で囲む。
```{r}
x
(x<-3)
```

変数名は記号や数字で始まらなければ、ほぼ自由に付けられる。
アルファベットは大文字と小文字が区別される点に注意する。
日本語も変数名に使えるが、環境によって文字コードが異なるため避けるのが無難である。
アンダースコア `_` やピリオド `.` は途中に入れられるが、`a.b` と `a_b` は別の名前として扱われる。

予約語である `if` など一部の名前^[`break, else, FALSE, for, function, if, in, Inf, NA, NaN, next, NULL, repeat, TRUE, while` など]は変数名に使えずエラーになる。
一方で `pi` のように既存の組み込み変数を上書きすることは可能である。
```{r}
pi
pi <- 3
pi
```

関数 `objects()` を使うと、現在存在するオブジェクトを確認できる。
`ls()` も同じ結果を返すエイリアスである。
R は変数や関数をすべてオブジェクトとして扱う言語である。
既存のオブジェクトを削除するには `rm()` を使う。
組み込み変数を上書きしていても、`pi` を削除すれば元の値が復活する。
```{r}
rm(pi)
pi
```

さらに、すべてのオブジェクトを削除したい場合は `rm(list=ls(all=TRUE))` と入力する。

## パッケージ
R ではパッケージを導入することで機能を拡張できる。

パッケージ `pkg` を導入する際は次を 1 度だけ実行する。
```{r}
#| eval: false
install.packages("pkg")
```
オプション `dependencies = TRUE` を指定すると、依存パッケージもまとめて導入される。
インストールは 1 度実行すればよいが、R を起動し直すたびに `library()` などで読み込む必要がある点に注意する。

パッケージ `pkg` が導入済みであれば、そのパッケージ内のコマンド `cmd` を実行するには
```{r}
#| eval: false
pkg::cmd
```
と、パッケージ名とコマンド名の間に `::` を挟む必要がある。 
この書き方は、パッケージを読み込まずに特定の関数だけを呼び出したいときや、名前が衝突したときに便利である。

また、事前に `library(pkg)` や `require(pkg)` を実行しておけば、
関数呼び出し時の `pkg::` を省略できる。
複数のパッケージに同名のコマンドが含まれる場合は、
後から `library` や `require` で読み込んだパッケージが優先される点に注意する。

`library` と `require` の使い方はほとんど同じだが、
`require` では次のようにパッケージがなければインストールするといった書き方ができる。
```{r}
#| eval: false
if (!require(lattice)){
  install.packages("lattice")
  require(lattice)
} 
```
`library()` はパッケージが見つからない場合にエラーで処理を止めるのに対し、`require()` は失敗すると `FALSE` を返し、処理を続行できる。
私自身は慣れもあって `library` を使うことが多い。
