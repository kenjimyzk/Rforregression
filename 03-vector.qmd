---
title: "vector"
output: html_document
---

# ベクトル
```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, collapse=TRUE)
```

## ベクトル
Rでは同じ型の値を集めたものをベクトルという.
ベクトルは `c()` を用いて構成する. 
```{r}
(num<-c(2,3,7,9))
(chr <- c("cat","dog","cow"))
```

ベクトルには長さという属性 (attribute) が付く.
```{r}
length(num)
length(chr)
```
ベクトルはオブジェクトの基本であり, 一つの値は長さが1のベクトルと考える.

型が同じでない場合, 強制的に同じ型に変換される.
文字列が含まれればすべて文字列になる.
数値と論理値の場合は論理値の `TRUE` が1に `FALSE` が0に変換される.

```{r}
(x<- c(1,4))
typeof(x)
(y <- c(2,FALSE,"4"))
typeof(y)
(z <- c(2,FALSE))
typeof(z)
```

## 算術演算子
四則演算などの算術演算子はその対象を数値ベクトルに拡張できる.
ベクトルの算術演算子はその要素ごと行う.
```{r}
a<-c(2,3,3,3)
b<-c(3,3,5,7)
a+b
a-b
a*b
a/b
a^b
```

片方が値, 同じ長さのベクトルとして演算が実行される.
```{r}
a+2
a-2
a*2
a/2
a^2
```

一般に長さが違う場合, 短いほうが繰り返される.
```{r}
c<-c(1,2)
a+c
a-c
a*c
a/c
a^c
```
なお 短いほうが長い方の約数でないと警告がでる.

## 論理演算子
論理値に対して演算をおこなって論理値を返す論理演算子というものがある.
Rには, 論理演算子として, 否定 (`!`), または (`|`), かつ (`&`) がある.
論理演算子もベクトルごとに評価できる.

```{r}
logic1 <- c(TRUE, FALSE, FALSE)
logic2 <- c(TRUE, TRUE, FALSE)
!logic1
logic1 | logic2
logic1 & logic2
```

ベクトルのうちすべての要素が `TRUE` かどうかを評価する `all` や
少なくとも一つの要素が `TRUE` かどうかを評価する `any` というのがある.
,
```{r}
any(logic1)
all(logic1)
```


## 比較演算子
2つの値を比較してして論理値を返す比較演算子というものがある.
Rには, 比較演算子として, 等しいか `==`, どちらかが大きいか `>`,  `<` がある.
それぞれのベクトルの要素ごとに評価できる.
```{r}
vec1 <- 1:4
vec2 <- c(2,1,3,4)
vec1 == vec2
vec1 > vec2
vec1 < vec2
```

等しくない `!=`, 以上および以下 `>=`, `<=` がある.
```{r}
vec1 != vec2 # !(vec1==vec2)
vec1 >= vec2 # (vec1 > vec2 | vec1 == vec2)
vec1 <= vec2 # (vec1 < vec2 | vec1 == vec2)
```

片方が値, 同じ長さのベクトルとしても演算が実行される.
```{r}
vec1 > 2
```

さらに `%in%` という演算子がある.
これは左のベクトルが右のベクトルに含まれるかどうかを示すものである.

```{r}
vec1 %in% 4:5
```

## 要素
ベクトルの要素はカギカッコで取り出す.
```{r}
num <- c(2,3,7,9)
num[3]
```

取り出すだけななく付値することもできる.
```{r}
num[3] <- 500
num
```

マイナスをつけるとその要素以外を取り出す.
```{r}
num[-3]
```

複数取り出すこともできる.
```{r}
num[c(1,4)]
```

他にも論理値ベクトルを使って取り出すことができる.
```{r}
idx <- c(TRUE,FALSE,TRUE,TRUE)
num[idx]
```

さらに比較演算子と組み合わせることができる.
```{r}
(num > 4)
num[num > 4]
```

また `:` をもちいて連続したベクトルが作れるので, それを利用してベクトルを抜き出すことができる.
```{r}
2:4
num[2:4]
```

またベクトルには名前の属性をつけて構成することがでる.
```{r}
vec <- c(x= 3, y =3, z = 4)
```
また次のようにしてもよい.
```{r}
names(num) <- letters[1:4]
```

いずれに名前の属性をつけると次のようにしてアクセスが可能である.
```{r}
vec["x"]
num["d"]
```




## 関数
引数がベクトルの関数がいくつかある. 
これによってベクトルの和や積が簡単に扱える.
```{r}
x<-c(1,2,3,4,5)
sum(x)
cumsum(x)
prod(x)
cumprod(x)
```

平均, 中央値, 分散, 標準偏差などの統計関数も扱える.
```{r}
x <- c(x,10)
mean(x)
median(x)
var(x)
sd(x)
```

ベクトルを並べ替えたり
最小値や最大値しめしたり, それが何番目の要素になるのかをしめすことができる.
```{r}
x <- c(3,3,5,0)
sort(x)
sort(x,decreasing = TRUE)
min(x)
max(x)
which.min(x)
which.max(x)
```

またベクトルに `NA` が含まれるき, 関数 `mean` などではデフォルトで結果が, `NA` になる.
それを避けるには `na.rm=TRUE` というオプションを付ける必要がある.

```{r}
x <- c(4,2,NA,3)
mean(x)
mean(x, na.rm = TRUE)
```

## 規則的なベクトル
`1:5` のような規則的なベクトルを柔軟に作成するのに `seq` を用いるとよい.
```{r}
1:5
seq(1, 5)
seq(1, 5, by = 2)
seq(1, 5, length.out = 4)
```

繰り返しを作成することができる `rep` も覚えておくと便利である.
```{r}
rep(1, 5)
rep(c(1, 2), times = 3)
rep(c(1, 2), each = 3)
```

またアルファベットの文字列もあらかじめ組み込まれている.
```{r}
letters
LETTERS
LETTERS[1:2]
```

## 乱数ベクトル
ベクトルを出鱈目に並べ直すには関数 `sample` を使う
```{r}
set.seed(10)
sample(1:5)
```
最初の行の関数 `set.seed` は他の環境でも再現可能性にするための設定である.


さて, この乱数は一旦出力された値は二度とでない非復元抽出である.
復元抽出にするには
```{r}
sample(1:5, replace=TRUE)
```
とオプション `replace=TRUE` をつける.

いくつ取り出すかをオプション `size` で決められる.
```{r}
sample(LETTERS[1:2], size=10, replace=TRUE)
```
非復元抽出の場合, 取りうる値より大きくできないことに注意されたい.

さらに確率を `prob` で変えることができる. 
```{r}
sample(LETTERS[1:2], prob=c(0.8,0.2),size=10,replace=TRUE)
```

独立な一様分布にしたがう長さ `size` のベクトルは `runif(size)` によって, 正規分布にしたがうベクトルは `rnorm(size)` で出力される.
```{r}
size <- 8
runif(size)
rnorm(size)
```
