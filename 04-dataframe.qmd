---
output:
  html_document: default
  html_notebook: default
---
# データ構造
```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE,collapse=TRUE)
```

## ベクトル
Rでは同じ型の値を集めたものをベクトルという.
ベクトルは `c()` を用いて構成する. 
```{r}
(num<-c(2,3,7,9))
(chr <- c("cat","dog","cow"))
```

ベクトルには長さという属性 (attribute) が付く.
```{r}
length(num)
length(chr)
```
ベクトルはオブジェクトの基本であり, 一つの値は長さが1のベクトルと考える.

型が同じでない場合, 強制的に同じ型に変換される.
文字列が含まれればすべて文字列になる.
数値と論理値の場合は論理値の `TRUE` が1に `FALSE` が0に変換される.

```{r}
(x<- c(1,4))
typeof(x)
(y <- c(2,FALSE,"4"))
typeof(y)
(z <- c(2,FALSE))
typeof(z)
```

### ベクトルのアクセス
ベクトルの要素はカギカッコに整数値を代入することで
取り出すせることができる. たとえば3番目のベクトルの要素を取り出すには以下とする.
```{r}
num <- c(2,3,7,9)
num[3]
```

また名前の属性をつけてベクトルを構成することがでる.
```{r}
vec <- c(x= 3, y =3, z = 4)
vec
names(vec)
```

すでにあるリストの場合, 次のようにしてもよい.
```{r}
names(num) <- letters[1:4]
num
```

いずれに名前の属性をつけると次のようにしてアクセスが可能である.
```{r}
vec["x"]
num["d"]
```



## リスト
ベクトルなどを集めたものをリストという.
ベクトル型の違うベクトルを関数 `list` で集める.

リストの属性には長さがある.
```{r}
(lst <- list("a",c(3,3,2)))
typeof(lst)
length(lst)
```

関数 `class` によってリストがであることが確認でき, `str` で属性を詳しく調べることができる.
```{r}
class(lst)
str(lst)
```

リストとベクトルの違いとして, リスト自体もリストとして含められることがある.
```{r}
typeof(list("b",lst))
```

リストベクトルに変換するには `unlist` を用いる.
それぞれの型が違う場合, 同じ型に強制変換される.
```{r}
lst<-list(1:3,2:6)
lst
unlist(lst)
unlist(list("a",1:4))
```

### リストのアクセス
リストの取りだすには, ベクトルのようにかぎかっこで数値を入力する.
以下は一番目のリストを表示している.

```{r}
lst[1]
```

また名前の属性をもてば, その名前を入力することで取り出すことができる.
たと次のようにして名前の属性をつけたリストを作る.
```{r}
(lst <- list(name="a",num=c(3,3,2)))
names(lst)
```

その上で以下のようにすれば2番目の要素が取り出せる.
```{r}
lst["num"]
```

いずれにせよ取り出したののもリストになることに注意されたい.
```{r}
typeof(lst[1])
typeof(lst["num"])
```

ベクトルとして取り出すには次のようにする.
```{r}
lst[[2]]
typeof(lst[[2]])
```

名前の属性がついていれば以下のようにもできる.
```{r}
lst[["num"]]
lst$num
```

リストのなかのあるベクトルの平均値を求めるには次のようにする.
```{r}
## mean(lst[[2]])
## mean(lst[["num"]])
mean(lst$num)
```
もしくは以下とする.
```{r}
with(lst, mean(num))
```

なおリストの要素を消すには以下のようにする.
```{r}
lst$num <- NULL
lst
```




## 因子ベクトル
### factor
文字列ベクトルを引数にした関数 `factor`によって 因子 (factor) ベクトルを作成できる.
```{r}
(x <- c("L","S","M","M","L"))
(x.fac <- factor(x))
```

因子ベクトルの実体は `level` という属性をもつ整数ベクトルである.
```{r}
typeof(x.fac)
length(x.fac)
levels(x.fac)
```

関数 `class` によって因数ベクトルがであることが確認でき, `str` で属性を詳しく調べることができる.
```{r}
class(x.fac)
str(x.fac)
```

また水準の表示順は自動的にアルファベット順になるが, それを変更するには次のようにする.
```{r}
(x.factor <- factor(x,levels=c("S","M","L")))
```

この水準に順序構造を付与するには次のようにする.
```{r}
(x.order <- ordered(x,levels=c("S","M","L")))
```

### cut
また数値を区間ごとに区分した因子ベクトルも作成可能である.
0から10までの値を発生させる.
```{r}
x <- runif(10,0,10)
x
```

5等分するには以下のようにする.
```{r}
cut(x, breaks=5)
```
これは登場したデータの最大値と最小値の幅を5等分している.

区間を指定するには以下のようにベクトルで指定する.
```{r}
cut(x,breaks=c(0,2,4,6,8,10))
```
0より大きく2以下, 2より大きく4以下,... となっている.

0も含めるのなら `include.lowest=TRUE` というオプションをつける.
```{r}
cut(x, breaks=seq(0,10,2),include.lowest=TRUE)
```

またこれを0以上2未満, 2以上4未満, ... とするにはオプション `right=FALSE` をつける.
```{r}
cut(x, breaks=seq(0,10,2),right=FALSE,include.lowest=TRUE)
```
このとき, `include.lowest=TRUE` は最大値を含めることを意味する.

また因子の名称はオプション `labels` で変更可能である.
```{r}
cut(x, breaks=seq(0,10,2),right=FALSE,include.lowest=TRUE,
    labels =c("A","B","C","D","E"))
```

## 行列
ベクトルに縦と横の次元を付与することによって行列 (matrix) を作ることができる.
```{r}
mat <- matrix(1:10, nrow=2,ncol=5)
mat
```

またオプション `byrow=TRUE` で横から行列を作成できる.
```{r}
matrix(1:10, nrow=2,ncol=5,byrow = TRUE)
```

この行列の実体は `dim` という属性を持つ数値ベクトルである.
```{r}
typeof(mat)
length(mat)
dim(mat)
```

他にもそれぞれの要素の次元は以下で得ることができる.
```{r}
nrow(mat)
ncol(mat)
```

関数 `class` によって因数ベクトルがであることが確認でき, `str` で属性を詳しく調べることができる.
```{r}
class(mat)
str(mat)
```


### 行列の演算

縦での結合は `rbind` を用いる
```{r}
mata<-matrix(1:5,nrow=1,ncol=5)
rbind(mat,mata)
```

横での結合は `cbind` を用いる
```{r}
matb<-matrix(1:4,nrow=2,ncol=2)
cbind(mat,matb)
```

転置行列は以下のようにすればよい.
```{r}
t(mat)
```

通常の `*` は要素ごとの掛け算になる. 
数学で用いられる行列同士の掛け算は `%*%` を実施する.
```{r}
matb %*% mat
```
行列のことが一致させる必要がある.


また列ごとの合計, 行ごとの合計は以下を実施する.
```{r}
colSums(mat)
rowSums(mat)
```
返り値はベクトルになる. 行列のすべての要素を足すには `sum` でよい.
```{r}
sum(mat)
```

また列ごとの平均, 行ごとの平均は以下を実施する.
```{r}
colMeans(mat)
rowMeans(mat)
```

### 行列のアクセス

行列からベクトルの取り出し以下のようにｓる.
```{r}
mat[2,]
```

ベクトルのまま取り出されてしまう.
オプション `drop=FALSE` をつけると行列のまま取り出すことができる.
```{r}
mat[, 3, drop=FALSE]
```

2つ同時に取り出すにときは特にオプションをしていしなくても行列として取り出せる.
```{r}
mat[,2:3]
```

要素の取り出し
```{r}
mat[2,3]
```

行列に名前を付けることができる.
```{r}
rownames(mat) <- letters[1:2]
colnames(mat) <- 1:5
mat
```

これによって以下のようにしてもアクセス可能である.
```{r}
mat["a","3"]
```

なお名前は次のようにしてあとから作成することができる.
```{r}
dimnames(mat) <- list(LETTERS[1:2],2:6)
mat
```



## データフレイム
同じ長さのベクトルを組み合わせたリストをデータフレイム (dataframe) という.
データフレイムは次のようにして作られる.
```{r}
df <- data.frame(x = rnorm(10), y = letters[1:10])
```

データフレイムは大規模なことが多いので最初の数行だけをみるためには `head` をもちいる.
```{r}
head(df)
```

データの簡単な統計表は `summary` を使うとよい.
```{r}
summary(df)
```

よりプログラム言語としてのデータ構造を調べるには `str` を使えばよい.
```{r}
str(df)
```

データフレイムはリストである.
```{r}
typeof(df)
class(df)
```

リストのように長さと名前をもつ.
```{r}
length(df)
names(df)
```

行列と同じ次元をもつ.
```{r}
dim(df)
ncol(df)
nrow(df)
```
`ncol(df)` は `length(df)` と同じである.

行列と同じ名前をもつ.
```{r}
dimnames(df)
colnames(df)
rownames(df)
```
`colnames(df)` は `names(df)` と同じである.

### データフレイムの演算
データフレイムは行列でもあるので, 注意があるが
行列での演算がほとんどそのまま利用できる.


```{r}
rbind(df, c(3,"a"))
```


```{r}
cbind(df,z=runif(10))
```

転置行列は行列として出力可能である.
以下のようにデータフレイムに因子ベクトルが含まれていたら全て文字列になる.
```{r}
t(df)
```

データフレイムの構成ベクトルがすべて論理値もしくは数値のとき,
同じ行数と列数のデータフレイムの要素ごとの四則演算は可能である.
ただし, 通常の行列演算を実施するには, 行列に変換しなければならない.

また  データフレイムの構成ベクトルがすべて論理値もしくは数値のとき,
列ごとの合計, 行ごとの合計が可能である.
```{r}
dff<-data.frame(a=1:5,b=c(TRUE, TRUE, TRUE, FALSE,FALSE))
colSums(dff)
rowSums(dff)
```
返り値はベクトルになる. 行列のすべての要素を足すには `sum` でよい.
```{r}
sum(dff)
```

また列ごとの平均, 行ごとの平均は以下を実施する.
```{r}
colMeans(dff)
rowMeans(dff)
```


### データフレイムのアクセス
データのアクセスとして, ベクトルのように一つのカギカッコで取り出すと以下のようになる.
```{r}
df["x"]
```
他にも `df[1]` でもよいが, いずれにせよデータフレイムとして取り出されてしまう.

ベクトルとして取り出すには以下を実施する.
```{r}
df$x
```
他にも `df[["x"]], df[[1]], df[,"x"], df[,1]` でもよい.
`
ある変数 $x$ の5番目の要素を取り出して別の値`100`を代入するには以下のようにする.
```{r}
df$x[5] <- 100
```
他にも `df[["x"]][5], df[[1]][5], df[5,"x"], df[5,1]` でもよい.

データフレイムのある変数の平均値を求めるには次のようにする.
```{r}
mean(df$x)
```
もしくは以下とする.
```{r}
with(df, mean(x))
```
他にも `attach(df)` を使うやり方もあるが, 現在では推奨されない.

なおリストの要素を消すには以下のようにする.
```{r}
df$x <- NULL
```

